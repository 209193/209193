#include <iostream>

class Benchmark {
public:
  Benchmark() {std::cout << "utworzono benchmark" << std::endl;};

  ~Benchmark() {};

  void testAlgorithm(Benchmark *_algorithm) const;
  virtual int runAlgorithm() const;
};

void Benchmark::testAlgorithm(Benchmark *_algorithm) const{

  _algorithm -> runAlgorithm();

}

int Benchmark::runAlgorithm() const{

  std::cout << "benchmark" << std::endl;

}

class Potegowanie: public Benchmark {
public:
  Potegowanie() {std::cout << "utworzono potegowanie" << std::endl;};
  
  ~Potegowanie() {};

  virtual int runAlgorithm() const;
};

int Potegowanie::runAlgorithm() const{

  std::cout << "potegowanie" << std::endl;

}


int main() {

  Potegowanie *pot = new Potegowanie;

  pot -> testAlgorithm(pot);

return 0;
}
